
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
/**
 *
 * @author Serra
 */
public class ProductPage extends javax.swing.JFrame {

    /**
     * Creates new form ProductPage
     */
    DefaultTableModel t = new DefaultTableModel();

    public ProductPage() {
        initComponents();

        t.addColumn("id");
        t.addColumn("name");
        t.addColumn("price");
        t.addColumn("stock");
        fillTable();
    }

    public void fillTable() {

        t.setRowCount(0);

        ArrayList<Product> products = ProductDatabaseManager.getProducts();

        for (Product product : products) {
            t.addRow(new Object[]{product.getId(), product.getName(), product.getPrice(), product.getStock()});
        }

        tbl_product.setModel(t);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbl_product = new javax.swing.JTable();
        btn_back = new javax.swing.JToggleButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txt_name = new javax.swing.JTextField();
        txt_price = new javax.swing.JTextField();
        btn_add = new javax.swing.JToggleButton();
        jLabel4 = new javax.swing.JLabel();
        btn_stockIncrease = new javax.swing.JToggleButton();
        btn_stockDecrrease = new javax.swing.JToggleButton();
        jLabel5 = new javax.swing.JLabel();
        btn_priceIncrease = new javax.swing.JToggleButton();
        btn_priceDecrease = new javax.swing.JToggleButton();
        btn_export = new javax.swing.JToggleButton();
        txt_stock = new javax.swing.JComboBox<>();

        jToggleButton1.setText("jToggleButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbl_product.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tbl_product);

        btn_back.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_back.setText("Back");
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel1.setText("Name :");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Price :");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Stock :");

        txt_name.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        txt_price.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N

        btn_add.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_add.setText("Add New Product");
        btn_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_addActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Product Stock :");

        btn_stockIncrease.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_stockIncrease.setText("Increase");
        btn_stockIncrease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_stockIncreaseActionPerformed(evt);
            }
        });

        btn_stockDecrrease.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_stockDecrrease.setText("Deacrease");
        btn_stockDecrrease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_stockDecrreaseActionPerformed(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel5.setText("Product Price :");

        btn_priceIncrease.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_priceIncrease.setText("Increase");
        btn_priceIncrease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_priceIncreaseActionPerformed(evt);
            }
        });

        btn_priceDecrease.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_priceDecrease.setText("Decrease");
        btn_priceDecrease.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_priceDecreaseActionPerformed(evt);
            }
        });

        btn_export.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        btn_export.setText("Export");
        btn_export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_exportActionPerformed(evt);
            }
        });

        txt_stock.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        txt_stock.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_export)
                    .addComponent(btn_back)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 438, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txt_name, javax.swing.GroupLayout.DEFAULT_SIZE, 141, Short.MAX_VALUE)
                                    .addComponent(txt_price)
                                    .addComponent(txt_stock, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addComponent(btn_add, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(btn_priceIncrease, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(btn_stockIncrease, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn_stockDecrrease, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btn_priceDecrease, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(24, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(btn_back)
                .addGap(47, 47, 47)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txt_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txt_price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txt_stock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(btn_add)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_stockIncrease)
                            .addComponent(btn_stockDecrrease))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn_priceIncrease)
                            .addComponent(btn_priceDecrease)))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(btn_export)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        // TODO add your handling code here:
        AdminPage a = new AdminPage();
        a.setVisible(true);
        dispose();
    }//GEN-LAST:event_btn_backActionPerformed

    private void btn_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_addActionPerformed
        // TODO add your handling code here:
        String name = txt_name.getText();
        String priceString = txt_price.getText();
        String stockString = (String) txt_stock.getSelectedItem();

        try {

            if (name.isEmpty() || priceString.isEmpty() || stockString.isEmpty()) {
                throw new Exception("Please fill in all the fields.");
            }

            BigDecimal price;
            try {
                price = new BigDecimal(priceString);
                if (price.compareTo(BigDecimal.ONE) < 0) {
                    throw new Exception("Price must be a positive value.");
                }
            } catch (NumberFormatException e) {
                throw new Exception("Price must be a numeric value.");
            }

            int stock;
            try {
                stock = Integer.parseInt(stockString);
                if (stock < 0) {
                    throw new Exception("Stock must be a non-negative value.");
                }
            } catch (NumberFormatException e) {
                throw new Exception("Stock must be a numeric value.");
            }

            Product p = new Product(name, price, stock);
            if (ProductDatabaseManager.createProduct(p)) {
                JOptionPane.showMessageDialog(rootPane, "Product added successfully.");
            } else {
                throw new Exception("An error occurred while adding the product.");
            }

            fillTable();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_addActionPerformed

    private void btn_stockIncreaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_stockIncreaseActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbl_product.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a product to update stock.");
            return;
        }

        int productId = Integer.parseInt(tbl_product.getValueAt(selectedRow, 0).toString());

        String stockIncrementString = (String) txt_stock.getSelectedItem();
        int stockIncrement;
        try {
            stockIncrement = Integer.parseInt(stockIncrementString);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number for stock increment.");
            return;
        }

        if (ProductDatabaseManager.increaseProductStock(productId, stockIncrement)) {
            JOptionPane.showMessageDialog(this, "Product stock updated successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Product updating flower stock.");
        }

        fillTable();
    }//GEN-LAST:event_btn_stockIncreaseActionPerformed

    private void btn_stockDecrreaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_stockDecrreaseActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbl_product.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a product to update stock.");
            return;
        }

        int flowerId = Integer.parseInt(tbl_product.getValueAt(selectedRow, 0).toString());

        String stockDecrementString = (String) txt_stock.getSelectedItem();
        int stockDecrement;
        try {
            stockDecrement = Integer.parseInt(stockDecrementString);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number for stock decrement.");
            return;
        }

        if (ProductDatabaseManager.decreaseProductStock(flowerId, stockDecrement)) {
            JOptionPane.showMessageDialog(this, "Product stock updated successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Error updating product stock.");
        }

        fillTable();
    }//GEN-LAST:event_btn_stockDecrreaseActionPerformed

    private void btn_priceIncreaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_priceIncreaseActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbl_product.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a product to update price.");
            return;
        }

        int productId;
        BigDecimal currentPrice;
        try {
            productId = Integer.parseInt(tbl_product.getValueAt(selectedRow, 0).toString());
            currentPrice = new BigDecimal(tbl_product.getValueAt(selectedRow, 2).toString());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "The selected row contains invalid data.");
            return;
        }

        String priceIncrementPercentageString = txt_price.getText();

        String regex = "^\\d+(\\.\\d+)?%$";
        if (!priceIncrementPercentageString.matches(regex)) {
            JOptionPane.showMessageDialog(this, "Please enter a valid percentage (e.g. 5%, 10.5%).");
            return;
        }

        double priceIncrementPercentage;
        try {
            priceIncrementPercentage = Double.parseDouble(priceIncrementPercentageString.replace("%", ""));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number for price increment percentage.");
            return;
        }

        BigDecimal percentage = BigDecimal.valueOf(priceIncrementPercentage).divide(BigDecimal.valueOf(100));
        BigDecimal incrementAmount = currentPrice.multiply(percentage);
        BigDecimal newPrice = currentPrice.add(incrementAmount);

        if (ProductDatabaseManager.updateProductPrice(productId, newPrice)) {
            JOptionPane.showMessageDialog(this, "Flower price updated successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Error updating product price.");
        }

        fillTable();
    }//GEN-LAST:event_btn_priceIncreaseActionPerformed

    private void btn_priceDecreaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_priceDecreaseActionPerformed
        // TODO add your handling code here:
        int selectedRow = tbl_product.getSelectedRow();

        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "Please select a product to update price.");
            return;
        }

        int productId;
        BigDecimal currentPrice;
        try {
            productId = Integer.parseInt(tbl_product.getValueAt(selectedRow, 0).toString());
            currentPrice = new BigDecimal(tbl_product.getValueAt(selectedRow, 2).toString());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "The selected row contains invalid data.");
            return;
        }

        String priceDecrementPercentageString = txt_price.getText();

        String regex = "^\\d+(\\.\\d+)?%$";
        if (!priceDecrementPercentageString.matches(regex)) {
            JOptionPane.showMessageDialog(this, "Please enter a valid percentage (e.g. 5%, 10.5%).");
            return;
        }

        double priceDecrementPercentage;
        try {
            priceDecrementPercentage = Double.parseDouble(priceDecrementPercentageString.replace("%", ""));
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Please enter a valid number for price decrement percentage.");
            return;
        }

        BigDecimal percentage = BigDecimal.valueOf(priceDecrementPercentage).divide(BigDecimal.valueOf(100));
        BigDecimal decrementAmount = currentPrice.multiply(percentage);
        BigDecimal newPrice = currentPrice.subtract(decrementAmount);

        if (ProductDatabaseManager.updateProductPrice(productId, newPrice)) {
            JOptionPane.showMessageDialog(this, "Product price updated successfully.");
        } else {
            JOptionPane.showMessageDialog(this, "Error updating product price.");
        }

        fillTable();
    }//GEN-LAST:event_btn_priceDecreaseActionPerformed

    private void btn_exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_exportActionPerformed
        // TODO add your handling code here:
        int[] selectedRows = tbl_product.getSelectedRows();

        if (selectedRows.length == 0) {
            JOptionPane.showMessageDialog(this, "No rows selected!");
            return;
        }

        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Specify a file to save");

        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            try {
                File selectedFile = fileChooser.getSelectedFile();
                String filePath = selectedFile.getAbsolutePath();

                if (selectedFile.exists()) {
                    int result = JOptionPane.showConfirmDialog(this, "The file already exists, overwrite?", "File exists",
                            JOptionPane.YES_NO_OPTION);
                    if (result == JOptionPane.NO_OPTION) {
                        return;
                    }
                }

                BufferedWriter ProductPage = new BufferedWriter(new FileWriter(filePath));

                for (int row : selectedRows) {
                    for (int col = 0; col < tbl_product.getColumnCount(); col++) {
                        ProductPage.write(String.valueOf(tbl_product.getValueAt(row, col)));
                        if (col < tbl_product.getColumnCount() - 1) {
                            ProductPage.write("\t");
                        }
                    }
                    ProductPage.write("\n");
                }

                ProductPage.close();
                JOptionPane.showMessageDialog(this, "Exported successfully");
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error exporting selected rows: " + e.getMessage());

            }
        }
    }//GEN-LAST:event_btn_exportActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ProductPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ProductPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ProductPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ProductPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ProductPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btn_add;
    private javax.swing.JToggleButton btn_back;
    private javax.swing.JToggleButton btn_export;
    private javax.swing.JToggleButton btn_priceDecrease;
    private javax.swing.JToggleButton btn_priceIncrease;
    private javax.swing.JToggleButton btn_stockDecrrease;
    private javax.swing.JToggleButton btn_stockIncrease;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JTable tbl_product;
    private javax.swing.JTextField txt_name;
    private javax.swing.JTextField txt_price;
    private javax.swing.JComboBox<String> txt_stock;
    // End of variables declaration//GEN-END:variables
}
